#ifndef __CMesh_h__
#define __CMesh_h__

namespace SimpleLib{

//=================================================================
// メッシュクラス
//	Xファイルモデルを読み込み・描画(固定機能)が可能。
//　解放は自動で行われる
//=================================================================
class CMesh{
public:
	//===============================================================================================
	// 情報取得系
	//===============================================================================================
	LPD3DXMESH					GetMesh(){return m_lpMesh;}				// メッシュ取得
	int							GetMaterialCnt(){return m_MaterialCnt;}	// マテリアル数取得
	CTexture*					GetTextures(){return m_Textures;}		// テクスチャ配列取得
	D3DMATERIAL9*				GetMaterials(){return m_Materials;}		// マテリアルテーブル取得
	LPD3DXBUFFER				GetAdjacency(){return m_lpAdjacency;}	// 隣接性データ取得

	//===============================================================================================
	// 読み込み
	//===============================================================================================
	// Xファイル読み込み
	BOOL LoadXFile(LPDIRECT3DDEVICE9 lpD3DDev, const char *lpFileName);
	BOOL LoadXFile(const char *lpFileName);

	//===============================================================================================
	// 解放
	//===============================================================================================
	void Release();									// メッシュ解放

	//===============================================================================================
	// 描画関係
	//===============================================================================================
	void Draw();									// メッシュ描画
	void Draw(D3DXMATRIX* matrix);

	// 
	CMesh();
	~CMesh();

private:

	//=================================================================
	// データ
	//=================================================================
	LPD3DXMESH					m_lpMesh;		// メッシュ
	CTexture*					m_Textures;		// テクスチャ配列
	D3DMATERIAL9*				m_Materials;	// マテリアル配列
	int							m_MaterialCnt;	// マテリアル数

	LPD3DXBUFFER				m_lpAdjacency;	// 隣接性データ
	std::string					m_FileName;		// ファイル名


private:
	// コピー禁止用
	CMesh(const CMesh& src){}
	void operator=(const CMesh& src){}
};

}
#endif
